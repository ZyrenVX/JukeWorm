#!/usr/bin/env bash

IFS=$'\n'
ARGUMENTS=("$@")
RED="\033[38;2;244;10;10m"
GREEN="\033[38;2;80;250;100m"
WARN="\033[38;2;233;98;116m"
BROWN="\033[38;2;240;120;120m"
LIGHT_SKIN="\033[38;2;255;230;180m"
GREY="\033[38;2;160;160;140m"
BLUE="\033[38;2;150;134;255m"
NC="\033[0m"

declare -a  mpv_flags=()
MUSIC_DIRECTORY="\${HOME}/Music"
MUSIC_DIR="$(eval echo ${MUSIC_DIRECTORY})"
QUIET=
SELECTED=()
CURRENTLY_PLAYING=()
LOOP=0
FULL_LOOP=0
SHUFFLE=0

# LOOP: Set if user selected more than 1 file (triggers script-level for-loop playback)
# FULL_LOOP: Set only if user passed --loop (mpv handles all track looping internally)
# CURRENTLY_PLAYING[]: Used only in FULL_LOOP mode for pretty logging. Not needed in script-loop mode.


# MPV_SOCKET="/tmp/mpv_socket"

# function cleanup() {
#     echo '{"text": "", "class": "inactive"}"' | socat - UNIX-CONNECT:${MPV_SOCKET}
# }

trap Exit SIGTERM SIGINT

function Exit() {
    exit $1
}

function LOG() {
    local type_="$1"
    shift
    local color=""
    case "${type_}" in
        info)
            color="${GREEN}"
            [[ -z "${QUIET}" ]] && echo -e "[${color}INFO${NC}]: $@"
            ;;
        warn)
            color="${WARN}"
            echo -e "[${color}WARN${NC}]: $@"
            ;;
        error)
            color="${RED}"
            echo -e "[${color}ERROR${NC}]: $@"
            ;;
    esac
}

function TurnMusicOn() {
    local files_joined=("$@")
    local f=""
    local -a track_preview=()

    if [[ $FULL_LOOP -eq 1 ]]; then
        for (( i=0; i < ${#files_joined[@]}; i++)); do
            f="${files_joined[$i]}"
            CURRENTLY_PLAYING+=("$(basename "${MUSIC_DIRECTORY}/${f}")")
            track_preview[$i]="\"${CURRENTLY_PLAYING[$i]%.*}\""
            LOG info "${GREY}MUSIC${NC} ${GREEN}${CURRENTLY_PLAYING[$i]%.*}${NC}"
        done
        # LOG info "${GREY}COMMAND${NC}: ${BROWN}mpv${NC} ${mpv_flags[@]} \"${LIGHT_SKIN}${files_joined[@]/#/${MUSIC_DIR}/}/${f}${NC}\"\n"
        LOG info "${GREY}COMMAND${NC}: ${BROWN}mpv${NC} ${mpv_flags[@]} ${LIGHT_SKIN}${track_preview[@]}${NC}\n"
        mpv ${mpv_flags[@]} "${files_joined[@]/#/${MUSIC_DIR}/}"

    else
        for f in "${files_joined[@]}"; do
            CURRENTLY_PLAYING="$(basename "${MUSIC_DIRECTORY}/${f}")"
            LOG info "${GREY}MUSIC${NC}: ${GREEN}${CURRENTLY_PLAYING%.*}${NC}"
            LOG info "${GREY}COMMAND${NC}: ${BROWN}mpv${NC} ${mpv_flags[@]} \"${LIGHT_SKIN}${MUSIC_DIRECTORY}/${f}${NC}\"\n"
            # echo "{\"text\": \"ðŸŽµ ${CURRENTLY_PLAYING%.*}\", \"class\":\"active\"}" | socat - UNIX-CONNECT:${MPV_SOCKET}
            mpv ${mpv_flags[@]} "${MUSIC_DIR}/${f}"
        done
    fi
}

function Play() {
    local MUSIC_FILES=()
    for file in "${SELECTED[@]}"; do
        if [[ -f "${MUSIC_DIR}/${file}" ]]; then
            MUSIC_FILES+=("${file}")
        else
            LOG error "No such Music file: '${LIGHT_SKIN}${file}${NC}'"
        fi
    done

    TurnMusicOn "${MUSIC_FILES[@]}"
}

# trap cleanup EXIT INT SIGTERM

function main() {
    local arg=
    local volume=
    local video=

    for (( i=0 ; i < "${#ARGUMENTS[@]}" ; i++ )); do
        arg="${ARGUMENTS[$i]}"
        case "${arg}" in
            vid|-vid|--vid|-video|--video)
                video="auto"
                ;;
            vol|-vol|--vol|-volume|--volume)
                volume=${ARGUMENTS[ $((i+1)) ]}
                [[ -z ${volume} || ${volume} == -* ]] && {
                    LOG error "No argument give after ${GREY}--volume${NC}"
                    LOG info "Default volume: ${BLUE}65${NC}"
                    volume=65
                }
                i=$((i+1))
                ;;
            -vol=*|--vol=*|--volume=*)
                if [[ "${arg#*=}" =~ ^[0-9]+$ ]]; then
                    volume=$(awk -F'=' '{print $2}' <<< "${arg}")
                else
                    LOG error "Invalid volume: ${arg}"
                    LOG info "Default volume: ${BLUE}65${NC}"
                fi
                ;;
            -q|--quiet)
                QUIET="--really-quiet"
                ;;
            -s|-sh|--shuff|--shuffle)
                SHUFFLE=1
                ;;
            -l|--loop)
                FULL_LOOP=1
                ;;
        esac
    done

    [[ -d "${MUSIC_DIR}" ]] || {
        LOG error "Music directory not found: '${BLUE}${MUSIC_DIR}${NC}'"
        exit 1
    }

    mapfile -t SELECTED < <(find "${MUSIC_DIR}" \( -type f -iregex '.*\.\(mp3\|flac\|m4a\|wav\|aac\|ogg\|opus\|wma\|alac\|ape\|mpc\|wavpack\)' \) -printf "%P\n" | fzf --multi)


    if [[ ${#SELECTED[@]} -eq 0 ]]; then
        LOG info "No song selected"
        exit 1
    elif [[ ${#SELECTED[@]} -gt 1 ]]; then
        LOOP=1
    fi

    [[ $SHUFFLE -eq 1 && $LOOP -eq 0 && $FULL_LOOP -eq 0 ]] && LOG warn "Shuffle can only be used with --loop and mutiple tracks"
    [[ $SHUFFLE -eq 1 ]] && SELECTED=($(printf "%s\n" "${SELECTED[@]}" | shuf))


    [[ $LOOP -eq 0 ]] && {
        mpv_flags+=("--loop-file=inf")
    } || {
        mpv_flags+=("--loop-file=no")
    }

    mpv_flags+=(
        "${QUIET}"
        "--vid=${video:-"no"}"
        "--volume=${volume:-65}"
        "--script-opts=mpris=yes"
        "--vo=gpu-next"
        "--hwdec=vulkan"
        "--hdr-compute-peak"
        "--osc=no"
        "--msg-level=ffmpeg/demuxer=error"
    )

    ### Play music
    Play
}

main

